<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DevLo - tutorials</title><link href="http://www.devlo.io/" rel="alternate"></link><link href="http://www.devlo.io/feeds/tutorials.atom.xml" rel="self"></link><id>http://www.devlo.io/</id><updated>2019-03-07T00:00:00-07:00</updated><subtitle>The Lopez brothers' development blog</subtitle><entry><title>Running Git in AWS Lambda Functions</title><link href="http://www.devlo.io/git-in-aws-lambda.html" rel="alternate"></link><published>2019-03-07T00:00:00-07:00</published><updated>2019-03-07T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2019-03-07:/git-in-aws-lambda.html</id><summary type="html">&lt;p&gt;Use GitPython w/ a Git Executable in AWS Lambda&lt;/p&gt;</summary><content type="html">&lt;p&gt;Technical Stack: AWS Lambda, Python 3.7, Serverless 
Read: 5 minutes&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Serverless Framework Installed &lt;a href="https://serverless.com/framework/docs/getting-started/"&gt;Serverless Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AWS Free Tier Account &lt;a href="https://aws.amazon.com/free/"&gt;AWS Sign Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check out the &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda Documentation&lt;/a&gt; if you're new to AWS Lambda and serverless technology.&lt;/li&gt;
&lt;li&gt;Check out &lt;a href="https://github.com/gitpython-developers/GitPython"&gt;GitPython&lt;/a&gt; - a python package used to interact w/ git repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This post builds on my previous &lt;a href="http://www.devlo.io/serverless-environments.html"&gt;post&lt;/a&gt; on building AWS lambdas with serverless framework.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I've been tinkering around with AWS Lambda Functions a lot at work. My latest project has me exploring the possibility of 
running &lt;strong&gt;Terraform&lt;/strong&gt;, &lt;strong&gt;Terragrunt&lt;/strong&gt; and &lt;strong&gt;git&lt;/strong&gt; in an AWS Lambda function. &lt;/p&gt;
&lt;p&gt;My purpose for this project was simple. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download github projects from Python&lt;/li&gt;
&lt;li&gt;Store project code in the &lt;code&gt;/tmp/&lt;/code&gt; folder of Lambda containers&lt;/li&gt;
&lt;li&gt;Allow me to create PRs, commits, etc from a lambda&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this tutorial, i'm mainly going to focus on the problems I encountered while getting &lt;strong&gt;GitPython&lt;/strong&gt; to work in AWS Lambda w/ Python runtimes. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;GitPython&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;GitPython&lt;/strong&gt; is a library built on git commands, therefore, it requires the git binary to be installed.&lt;/p&gt;
&lt;p&gt;Install it in your python package by running the following pip command or including it in your requirements file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install GitPython
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;First Issues&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Here was my initial lambda function as defined in my &lt;code&gt;serverless.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  run-git:
    handler: src/handler/run_git.lambda_handler
    name: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-git
    description: run git commands from lambda
    memorySize: 256
    timeout: 30
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The lambda handle at &lt;code&gt;run_git.lambda_handler&lt;/code&gt; ran the following python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;git&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;project_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;github_project&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;github_org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;git_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://github.com/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Downloading repo from &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;............&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;git_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone_from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;git_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/tmp/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;project_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code was simple, it would download a github project and store it in the &lt;code&gt;/tmp/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Should have been easy until I ran into this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;src/handler/run_git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Failed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bad&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;ways&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;GIT_PYTHON_GIT_EXECUTABLE&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;rectified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="n"&gt;warning&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;silenced&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;aggravated&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;setting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;GIT_PYTHON_REFRESH&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;quiet&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;silence&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;warning&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;printed&lt;/span&gt; &lt;span class="n"&gt;warning&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;raise&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;raised&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;

&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;GIT_PYTHON_REFRESH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;quiet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking for a quick solution; I immediately put &lt;code&gt;GIT_PYTHON_REFRESH=quiet&lt;/code&gt; in to the &lt;code&gt;ENVIRONMENT&lt;/code&gt; variables section of my Lambda function. &lt;/p&gt;
&lt;p&gt;That resulted in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Cmd(&amp;#39;git&amp;#39;) not found due to: FileNotFoundError(&amp;#39;[Errno 2] No such file or directory: &amp;#39;git&amp;#39;: &amp;#39;git&amp;#39;&amp;#39;)
  cmdline: git clone -v https://github.com/hearsaycorp/hearsay-messages /tmp/hearsay-messages: GitCommandNotFound
Traceback (most recent call last):
  File &amp;quot;/var/task/src/handler/run_terraform.py&amp;quot;, line 13, in lambda_handler
    download_hearsay_repo(repo_name, git_hash)
  File &amp;quot;/var/task/src/utils/github_utils.py&amp;quot;, line 16, in download_hearsay_repo
    repo = Repo.clone_from(git_url, &amp;#39;/tmp/%s&amp;#39; % project_name)
  File &amp;quot;/var/task/git/repo/base.py&amp;quot;, line 988, in clone_from
    return cls._clone(git, url, to_path, GitCmdObjectDB, progress, **kwargs)
  File &amp;quot;/var/task/git/repo/base.py&amp;quot;, line 933, in _clone
    v=True, universal_newlines=True, **add_progress(kwargs, git, progress))
  File &amp;quot;/var/task/git/cmd.py&amp;quot;, line 548, in &amp;lt;lambda&amp;gt;
    return lambda *args, **kwargs: self._call_process(name, *args, **kwargs)
  File &amp;quot;/var/task/git/cmd.py&amp;quot;, line 1014, in _call_process
    return self.execute(call, **exec_kwargs)
  File &amp;quot;/var/task/git/cmd.py&amp;quot;, line 738, in execute
    raise GitCommandNotFound(command, err)
git.exc.GitCommandNotFound: Cmd(&amp;#39;git&amp;#39;) not found due to: FileNotFoundError(&amp;#39;[Errno 2] No such file or directory: &amp;#39;git&amp;#39;: &amp;#39;git&amp;#39;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That error made it clear to me. AWS Lambda functions did not come bundled with &lt;code&gt;git&lt;/code&gt; executables in the runtime container. Therefore, &lt;strong&gt;GitPython&lt;/strong&gt; 
could not run commands against &lt;code&gt;git&lt;/code&gt; in the container's &lt;code&gt;$PATH&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Next Issues&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I thought alright, simple, how hard could it be to install &lt;code&gt;git&lt;/code&gt; on the &lt;code&gt;$PATH&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Turned out to be pretty tough. I looked all over the internet and stumbled onto the following article by &lt;a href="https://cloudbriefly.com/post/running-git-in-aws-lambda/#appendix-b-how-to-clone-a-git-repository-in-aws-lambda-python"&gt;cloudbriefly.com&lt;/a&gt;. 
At first glance, it seemed way too complicated. However, the more I read it, the more it made sense.&lt;/p&gt;
&lt;p&gt;I figured I'd give it a shot and run their python code before running &lt;code&gt;GitPython&lt;/code&gt; code. &lt;/p&gt;
&lt;p&gt;I downloaded the &lt;code&gt;git&lt;/code&gt; binary from Amazon Repositories and added the &lt;code&gt;/tmp/&lt;/code&gt; path to my &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Still this resulted in: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git.exc.GitCommandNotFound: Cmd(&amp;#39;git&amp;#39;) not found due to: FileNotFoundError(&amp;#39;[Errno 2] No such file or directory: &amp;#39;git&amp;#39;: &amp;#39;git&amp;#39;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I was about to give up when I stumbled upon the following &lt;a href="https://github.com/lambci/git-lambda-layer"&gt;Lambda Layer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This Lambda Layer promised to include the binaries for &lt;code&gt;ssh&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; regardless of the lambda runtime. &lt;/p&gt;
&lt;p&gt;I had never used Lambda Layers before but remember attending a session about them at AWS re:Invent. &lt;/p&gt;
&lt;p&gt;(Read about Lambda Layers &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-use-any-programming-language-and-share-common-components/"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Seemed too simple. I had searched the internet for hours on a solution for installing git on AWS Lambda Functions. &lt;/p&gt;
&lt;p&gt;I included the layer in my &lt;code&gt;serverless.yml&lt;/code&gt; file like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  run-git:
    handler: src/handler/run_git.lambda_handler
    name: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-git
    description: run git commands from lambda
    memorySize: 256
    timeout: 30
    layers:
      - arn:aws:lambda:us-west-2:553035198032:layer:git:5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I deployed my function and BOOM! It worked. Just like that. My lambda function now included a ~layer~ that would allow me to use the &lt;code&gt;git&lt;/code&gt; binary. So simple. Now I could play
around with &lt;code&gt;git&lt;/code&gt; in my lambda functions.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This should help you install &lt;code&gt;git&lt;/code&gt; on AWS Lambda functions and use the &lt;strong&gt;GitPython&lt;/strong&gt; python package.&lt;/p&gt;
&lt;p&gt;PM me on LinkedIn if you have any questions! Info should be located on the left.&lt;/p&gt;
&lt;p&gt;-- Miguel Lopez&lt;/p&gt;</content><category term="serverless"></category><category term="lambda"></category><category term="aws"></category><category term="python"></category><category term="cloud"></category><category term="layers"></category></entry><entry><title>Solving Connectivity Issues w/ Global Protect</title><link href="http://www.devlo.io/global-protect-issues.html" rel="alternate"></link><published>2018-04-13T00:00:00-07:00</published><updated>2018-04-13T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-04-13:/global-protect-issues.html</id><summary type="html">&lt;p&gt;Solving Connectivity Issues on Global Protect&lt;/p&gt;</summary><content type="html">&lt;h2&gt;&lt;strong&gt;Resend Credential Error&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I recently got a new Mac at work and spent the past 8 hours trying to solve connectivity issues with Global Protect.&lt;/p&gt;
&lt;p&gt;My global protect would throw out this generic error that said:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Resend Credential

Cannot connect to service socket
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I was able to poke around and find the logs for this issue at &lt;code&gt;~/Library/Logs/PaloAltoNetworks/GlobalProtect/PanGPA.log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I ran a &lt;code&gt;tail -f&lt;/code&gt; on that log and found the following trace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;P 595-T771   Apr 10 20:40:42:225745 Info ( 291): InitConnection ...
P 595-T771   Apr 10 20:40:42:225785 Info (  59): fd still open before connect
P 595-T771   Apr 10 20:40:42:225988 Info (  80): Failed to connect to server at port:4767
P 595-T771   Apr 10 20:40:42:226004 Info ( 295): Cannot connect to service, error: 61
P 595-T771   Apr 10 20:40:42:226010 Debug( 474): Unable to connect to Pan Service
P 595-T771   Apr 10 20:40:47:225540 Info ( 291): InitConnection ...
P 595-T771   Apr 10 20:40:47:225581 Info (  59): fd still open before connect
P 595-T771   Apr 10 20:40:47:225782 Info (  80): Failed to connect to server at port:4767
P 595-T771   Apr 10 20:40:47:225799 Info ( 295): Cannot connect to service, error: 61
P 595-T771   Apr 10 20:40:47:225805 Debug( 474): Unable to connect to Pan Service
P 595-T771   Apr 10 20:40:52:226040 Info ( 291): InitConnection ...
P 595-T771   Apr 10 20:40:52:226069 Info (  59): fd still open before connect
P 595-T771   Apr 10 20:40:52:226206 Info (  80): Failed to connect to server at port:4767
P 595-T771   Apr 10 20:40:52:226218 Info ( 295): Cannot connect to service, error: 61
P 595-T771   Apr 10 20:40:52:226223 Debug( 474): Unable to connect to Pan Service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Over and over again.&lt;/p&gt;
&lt;p&gt;As it turns out, this was because Global Protect could not connect to an agent called the pangps service. You can check if this service is loaded by running the following command in your terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangpa.plist
launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangps.plist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're ~lucky~ like me, you'll see that the service is running. So what the hell right? Why isn't Pan Service working???&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As it turns out, I needed to &lt;strong&gt;install Global Protect as the root admin&lt;/strong&gt; on my Mac. This is incredibly &lt;strong&gt;frustrating&lt;/strong&gt; because my user already had the admin role associated with it. &lt;/p&gt;
&lt;p&gt;Before you reinstall, it's important that you allow your mac to allow 3rd party apps to run. &lt;/p&gt;
&lt;p&gt;You can find this under "Security and Privacy". You'll need to show Advanced settings and click Allow Apps Downloaded from "Anywhere"&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Uninstall Global Protect&lt;/li&gt;
&lt;li&gt;Log in as the admin user&lt;/li&gt;
&lt;li&gt;Reinstall Global Protect&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you reinstall, head back over to the "Security and Privacy" settings. You'll see a prompt that asks if Global Protect is allowed to run on this machine. Click yes. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Security and Privacy" src="http://cdn.osxdaily.com/wp-content/uploads/2016/09/gatekeeper-allow-apps-anywhere-macos-2.jpg" title="Security and Privacy"&gt;&lt;/p&gt;
&lt;p&gt;By this point you should able to connect to Global Protect. If not, i'm sorry. Best of luck :(&lt;/p&gt;</content><category term="mac"></category><category term="vpn"></category></entry><entry><title>Managing Envrionments on Serverless Framework</title><link href="http://www.devlo.io/serverless-environments.html" rel="alternate"></link><published>2018-04-02T00:00:00-07:00</published><updated>2018-04-02T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-04-02:/serverless-environments.html</id><summary type="html">&lt;p&gt;Learn how to deploy Lambda functions to dev/test/stage/prod environments on Serverless Framework&lt;/p&gt;</summary><content type="html">&lt;p&gt;Technical Stack: AWS Lambda, Java 8 
Read: 10 minutes &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java 8 Runetime Installed &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"&gt;Oracle Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Serverless Framework Installed &lt;a href="https://serverless.com/framework/docs/getting-started/"&gt;Serverless Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AWS Free Tier Account &lt;a href="https://aws.amazon.com/free/"&gt;AWS Sign Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda Documentation&lt;/a&gt; if you're new to AWS Lambda and serverless technology.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;AWS Lambda is one of the hottest services out on the market right now. First introduced in November 2014, it has completely revolutionized the way developers develop and deploy cloud-first services and applications. Here are some of the immediate benefits of Lambda functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run code without servers&lt;/li&gt;
&lt;li&gt;Automatically scales code without any configuration&lt;/li&gt;
&lt;li&gt;Get charged per 100ms of execution time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of this post, you will learn to manage and deploy AWS Lambda functions to dev/test/stage/prod environments using the Serverless framework as your deployment tool. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Serverless Framework&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The Serverless Framework should &lt;strong&gt;not&lt;/strong&gt; to be confused with &lt;em&gt;Serverless Technology&lt;/em&gt;, the name commonly used to describe Function-as-a-Service technology. &lt;strong&gt;The Serverless Framework is a CLI-tool you can install to help you deploy and manage your serverless functions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Serverless is my #1 choice for deplying lambda functions because: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It supports all major cloud providers. Serverless framework deploys to AWS, Azure, Google, etc. (No vendor lock-in)&lt;/li&gt;
&lt;li&gt;YML based instructions that deploy infrastructure-as-code&lt;/li&gt;
&lt;li&gt;Large developer community with dozens of plugins &lt;a href="https://github.com/serverless/plugins"&gt;Github Repo Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Serverless Framework uses a serverless.yml file to deploy your functions to a cloud provider. &lt;/p&gt;
&lt;p&gt;Here is a basic example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;simple&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;

&lt;span class="n"&gt;frameworkVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;=1.2.0 &amp;lt;2.0.0&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;
  &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java8&lt;/span&gt;

&lt;span class="kd"&gt;package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="sr"&gt;/distributions/&lt;/span&gt;&lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;simple&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;zip&lt;/span&gt;

&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;currentTime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;serverless&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Handler&lt;/span&gt;
    &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ping&lt;/span&gt;
          &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you haven't deployed a function with Serverless yet, I'd recommend taking a few minutes to deploy their boilerplate function &lt;a href="https://serverless.com/framework/docs/providers/aws/guide/quick-start/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Building Environments in Serverless&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A creative way to build environments on your serverless.yml file is to take advantage of the serverless variable system. The Serverless variable system allows you to reference other yml files by loading them into a variable. This will be the bread and butter of the pattern i'm about to show you.&lt;/p&gt;
&lt;p&gt;For example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;(./&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;

&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;
  &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java8&lt;/span&gt;
  &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-east-2&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt;

  &lt;span class="n"&gt;vpc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vpc&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;if &lt;code&gt;sls deploy --stage prod&lt;/code&gt; is ran, the &lt;code&gt;provider.stage&lt;/code&gt; variable in the yml will be set to &lt;code&gt;prod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${self:provider.stage}&lt;/code&gt; resolves to &lt;code&gt;prod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prod&lt;/code&gt; is then used in &lt;code&gt;${file(./config/${self:provider.stage}.yml)}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${file(./config/prod.yml)}&lt;/code&gt; and loaded into the &lt;code&gt;custom.configFile&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${self:custom.configFile.vpc}&lt;/code&gt; will load the &lt;code&gt;vpc&lt;/code&gt; variable from the &lt;code&gt;prod.yml&lt;/code&gt; file loaded into &lt;code&gt;custom.configFile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Likewise, if you ran &lt;code&gt;sls deploy --stage test&lt;/code&gt;, the stage variablle would be set to &lt;code&gt;test&lt;/code&gt; and the &lt;code&gt;test.yml&lt;/code&gt; would be loaded into &lt;code&gt;custom.configFile&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Organizing your environmentfiles&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I'd recommend laying out your files in the following pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| configs 
| - dev.yml
| - test.yml
| - stage.yml
| - prod.yml
| - dr.yml
| src 
| - main
| - - java
| - - - net.app.lambda
| - - - - example
| - - - - - ExampleHandler
| serverless.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A typical config file will look like this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;dev.yml&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;region: &amp;quot;us-east-2&amp;quot;

APNS_BASE_ARN: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ssm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NONPROD&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apns&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
GCM_BASE_ARN: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ssm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NONPROD&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gcm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;

KMS_KEY: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ssm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NONPROD&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;security&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kms&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
ELASTICACHE_CONFIGURATION_ENDPOINT: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ssm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DEV&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;memcached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
MEMCACHED_DEFAULT_TTL_VALUE: &amp;quot;604800&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This allows you to define different regions per {stage}.yml. You have the flexibility to set different values for different variables. You could decide that the &lt;code&gt;MEMCACHED_DEFAULT_TTL_VALUE:&lt;/code&gt; needs to be &lt;code&gt;172800&lt;/code&gt; in PROD as opposed to the &lt;code&gt;604800&lt;/code&gt; in DEV. You could call different SSM values or even define different VPC Security Groups and Subnets. &lt;/p&gt;
&lt;p&gt;This pattern gives you a clear-readable format for your environment config files that are loaded into the parent &lt;code&gt;serverless.yml&lt;/code&gt; file. &lt;/p&gt;
&lt;p&gt;Here is a general &lt;code&gt;serverless.yml&lt;/code&gt; that will use the following &lt;code&gt;dev.yml&lt;/code&gt; file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;

&lt;span class="n"&gt;frameworkVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;=1.2.0 &amp;lt;2.0.0&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;(./&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;

&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;
  &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java8&lt;/span&gt;
  &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt;

  &lt;span class="n"&gt;versionFunctions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;logRetentionInDays&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;

  &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;APNS_BASE_ARN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;APNS_BASE_ARN&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;GCM_BASE_ARN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GCM_BASE_ARN&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;ELASTICACHE_CONFIGURATION_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ELASTICACHE_CONFIGURATION_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;MEMCACHED_DEFAULT_TTL_VALUE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MEMCACHED_DEFAULT_TTL_VALUE&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;APNS_BAS_ARN&lt;/code&gt;, &lt;code&gt;GCM_BASE_ARN&lt;/code&gt;, &lt;code&gt;ELASTICACHE_CONFIGURATION_ENDPOINT&lt;/code&gt;, and &lt;code&gt;MEMCACHED_DEFAULT_TTL_VALUE&lt;/code&gt; variables are loaded from the &lt;code&gt;custom.configFile&lt;/code&gt; file we loaded earlier with &lt;code&gt;sls deploy --stage {env}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tip: &lt;code&gt;${opt:stage, 'dev'}&lt;/code&gt; just means to use the text passed in after the &lt;code&gt;--stage&lt;/code&gt; cli argument. If no &lt;code&gt;--stage&lt;/code&gt; argument is used then default to &lt;code&gt;dev&lt;/code&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I've found this file pattern to be extremely useful for defining my AWS resources throughout serverless.yml. It gives me full control over what I'm passing to the serverless.yml file for each of my lambda environments. &lt;/p&gt;
&lt;p&gt;You can find an example of the config pattern i've discussed &lt;a href="https://github.com/lopezm1/java-aws-template/tree/master/app-lambda"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="serverless"></category><category term="lambda"></category><category term="aws"></category><category term="java"></category><category term="cloud"></category></entry><entry><title>Setting up a Pelican Blog on Github Pages with Travis-CI using MacOS High Sierra</title><link href="http://www.devlo.io/setting-up-a-pelican-blog-on-github-pages-with-travis-ci-using-macos-high-sierra.html" rel="alternate"></link><published>2018-03-22T00:00:00-07:00</published><updated>2018-04-04T00:00:00-07:00</updated><author><name>Sergio Lopez</name></author><id>tag:www.devlo.io,2018-03-22:/setting-up-a-pelican-blog-on-github-pages-with-travis-ci-using-macos-high-sierra.html</id><summary type="html">&lt;p&gt;The step-by-step instructions to get this blog up and running.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;&lt;strong&gt;Intro&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Setting up this blog was not a difficult task, but it did some digging around the internet to get everything up and 
running the way my brother and I visioned our blog. I'm going to document the steps I followed from start to finish, combined from all those resources, 
so that anyone wanting to setup something similar can do so!&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Configure Mac High Sierra 10.13&lt;/strong&gt;&lt;/h2&gt;
&lt;h4&gt;Bash profile setup&lt;/h4&gt;
&lt;p&gt;First thing is to make sure that we update the PATH to ensure that any Homebrew installations take precedence over stock macOS binaries.&lt;/p&gt;
&lt;p&gt;Open your &lt;code&gt;.bash_profile&lt;/code&gt; using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim ~/.bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Ensure user-installed binaries take precedence&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/share/python:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="c1"&gt;# Load .bashrc if it exists&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt; -f ~/.bashrc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Type &lt;code&gt;:wq&lt;/code&gt; to write and save the &lt;code&gt;.bash_profile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To have the directives take effect in the current session, without a restart needed. Type the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Homebrew Install&lt;/h4&gt;
&lt;p&gt;Homebrew allows you to install stuff you need, quick and easy, that Apple didn't.&lt;/p&gt;
&lt;p&gt;To install paste the following in the terminal: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /usr/bin/ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew doctor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To ensure that it installed correctly and see if anything needs to be addressed&lt;/p&gt;
&lt;h4&gt;Python Install&lt;/h4&gt;
&lt;p&gt;Now that Homebrew is installed, we can use it to install Python 2.7&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install python@2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, check what pythons are found on your OSX by typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which -a python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There should be one python found at &lt;code&gt;/usr/bin/&lt;/code&gt; (the Apple python) and one at &lt;code&gt;/usr/local/bin/&lt;/code&gt; which is the Homebrew python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will show you, which python is found first in your &lt;code&gt;$PATH&lt;/code&gt; and will be executed when you invoke python.&lt;/p&gt;
&lt;h4&gt;Virtualenv Install&lt;/h4&gt;
&lt;p&gt;When you're working on python projects, you might run into the scenario where one project requires a specific version of a package
and another project could require a newer version of that package. Now this could cause an issue if they were all installed 
globally, in order to get around that I recommend we install Virtualenv&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip2 install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once that is installed, we should create a directory to store our virtual environments. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p ~/Virtualenvs
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Restricting Pip to Virtual Environments&lt;/h4&gt;
&lt;p&gt;To ensure that pip will not install a package in global but only if a virtual environment is active, we need to create/update
the pip configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p ~/Library/Application&lt;span class="se"&gt;\ &lt;/span&gt;Support/pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We’ll then open Pip’s configuration file &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim ~/Library/Application&lt;span class="se"&gt;\ &lt;/span&gt;Support/pip/pip.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;add the following lines: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;install&lt;span class="o"&gt;]&lt;/span&gt;
require-virtualenv &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;uninstall&lt;span class="o"&gt;]&lt;/span&gt;
require-virtualenv &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Create Pelican Virtual Environment &lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;With our MacOS configured we can now install pelican. First we create the virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Virtualenvs
$ virtualenv pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and activate it via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; pelican
$ &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install pelican using pip2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip2 install pelican markdown typogrify
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Setting up GitHub Pages&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To create a Github user page, make sure you're logged into github and create and initialize two new repositories:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;yourusername.github.blog&lt;/em&gt; and &lt;em&gt;yourusername.github.io&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;yourusername.github.blog&lt;/em&gt; repository will hold the source code of the blog and the  &lt;em&gt;yourusername.github.io&lt;/em&gt; repository
will hold the output HTML files that pelican generates.&lt;/p&gt;
&lt;p&gt;Next, you'll clone your &lt;em&gt;yourusername.github.blog&lt;/em&gt; branch into your projects folder, if you don't have one. Go ahead and create one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p ~/Projects/
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projects/
$ git clone https://github.com/yourusername/yourusername.github.blog.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Setting up Pelican&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Once Pelican has been installed, and your repositories are set up,  you can create a skeleton project via the pelican-quickstart command. First
we need to switch to the directory of our project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projects/yourusername.github.blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;initiate pelican using the command: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It should ask you a series of questions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; ./
$ What will be the title of this web site? blog
$ Who will be the author of this web site? Your Name
$ What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;pt&lt;span class="o"&gt;]&lt;/span&gt; en
$ Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
$ Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
$ How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
$ What is your &lt;span class="nb"&gt;time&lt;/span&gt; zone? 
$ Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y 
$ Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
$ Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
$ Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
$ Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
$ Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
$ Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
$ Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
$ Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;yourusername.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
Done. Your new project is available at /home/yourusername/yourusername.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Picking a theme&lt;/h4&gt;
&lt;p&gt;The next step is to pick a theme for the blog, we can use this site &lt;a href="http://www.pelicanthemes.com/"&gt;Pelican Themes&lt;/a&gt; to see
live examples of themes.&lt;/p&gt;
&lt;p&gt;Once a theme is picked you need create a submodule of the theme you want.
Clone the pelican-themes repository into a submodule of &lt;em&gt;yourusername.github.blog&lt;/em&gt;. For this example, I'm using the Flexi :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule add git@github.com:alexandrevicenzi/Flex.git Flex
$ git submodule init
$ git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you should have your pelican-themes repository stored at &lt;em&gt;~/Projects/yourusername.github.blog/Flex&lt;/em&gt;.
To use one of the themes, edit your Pelican settings file &lt;code&gt;pelicanconf.py&lt;/code&gt; to include this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./Flex&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the changes and regenerate your site by using the make command &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make devserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which will simultaneously run Pelican in regeneration mode as well as serve the output at &lt;code&gt;http://localhost:8000&lt;/code&gt;. 
Once you are done viewing your changes, you should stop the development server via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make stopserver
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Add Custom Domain to Blog&lt;/h4&gt;
&lt;p&gt;To use a custom domain with GitHub Pages, you need to put the domain of your site (e.g., blog.example.com)
inside a CNAME file at the root of your site. To do this, create the content/extra/ directory and add a CNAME file to it.
Then use the STATIC_PATHS setting to tell Pelican to copy this file to your output directory. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Setting up Apex domain  DNS&lt;/h4&gt;
&lt;p&gt;You can set up an apex domain through your DNS provider and GitHub Pages' servers will automatically
 create redirects between them. For example, your site can be found at &lt;code&gt;www.example.com&lt;/code&gt; or &lt;code&gt;example.com.&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Contact your DNS provider for detailed instructions on how to set up A records.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow your DNS provider's instructions to create two A records that point your custom domain to the following IP addresses:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;192.30.252.153&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;192.30.252.154&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To confirm that your DNS record is set up correctly, use the dig command with your custom domain. Using a custom domain as an example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dig +noall +answer example.com
 example.com.   &lt;span class="m"&gt;73&lt;/span&gt;  IN  A &lt;span class="m"&gt;192&lt;/span&gt;.30.252.153
 example.com.   &lt;span class="m"&gt;73&lt;/span&gt;  IN  A &lt;span class="m"&gt;192&lt;/span&gt;.30.252.154
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Setting up Travis CI&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now we're going to setup Travis CI, which will allow us to deploy a new version of the blog everytime there is a commit to master.&lt;/p&gt;
&lt;p&gt;First, create a &lt;code&gt;requirements.txt&lt;/code&gt; in the blog project folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican
Markdown
typogrify
fabric
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then create a &lt;code&gt;.travis.yml&lt;/code&gt; file in the same folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.7&lt;/span&gt;
&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make html&lt;/span&gt;
&lt;span class="nt"&gt;notifications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;on_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
    &lt;span class="nt"&gt;on_failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;global&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git submodule update --init --recursive&lt;/span&gt;
&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash deploy.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then add also the &lt;code&gt;deploy.sh&lt;/code&gt; script and update the global variable with yours:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nv"&gt;BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;master
&lt;span class="nv"&gt;TARGET_REPO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yourusername/yourusername.github.io.git
&lt;span class="nv"&gt;PELICAN_OUTPUT_FOLDER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;output

&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Testing travis-encrypt&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$VARNAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$TRAVIS_PULL_REQUEST&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Starting to deploy to Github Pages\n&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$TRAVIS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        git config --global user.email &lt;span class="s2"&gt;&amp;quot;travis@travis-ci.org&amp;quot;&lt;/span&gt;
        git config --global user.name &lt;span class="s2"&gt;&amp;quot;Travis&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="c1"&gt;#using token clone gh-pages branch&lt;/span&gt;
    git clone --quiet --branch&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BRANCH&lt;/span&gt; https://&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;@github.com/&lt;span class="nv"&gt;$TARGET_REPO&lt;/span&gt; built_website &amp;gt; /dev/null
    &lt;span class="c1"&gt;#go into directory and copy data we&amp;#39;re interested in to that directory&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; built_website
    rsync -rv --exclude&lt;span class="o"&gt;=&lt;/span&gt;.git  ../&lt;span class="nv"&gt;$PELICAN_OUTPUT_FOLDER&lt;/span&gt;/* .
    &lt;span class="c1"&gt;#add, commit and push files&lt;/span&gt;
    git add -f .
    git commit -m &lt;span class="s2"&gt;&amp;quot;Travis build &lt;/span&gt;&lt;span class="nv"&gt;$TRAVIS_BUILD_NUMBER&lt;/span&gt;&lt;span class="s2"&gt; pushed to Github Pages&amp;quot;&lt;/span&gt;
    git push -fq origin &lt;span class="nv"&gt;$BRANCH&lt;/span&gt; &amp;gt; /dev/null
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Deploy completed\n&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to create the encrypted token under env global in order to let Travis CI intract withtthe repository.
Login to the Github web interface to get an &lt;a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/"&gt;Authentication Token&lt;/a&gt;, and then install the travis command line tool with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install ruby1.9.1-dev
$ sudo gem install travis
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run from inside the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ travis encrypt &lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AUTHENTICATIONTOKENFROMGITHUB --add env.global
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From now on, every time you commit a change to master, it should kick off a build in travis ci and push the code to your &lt;em&gt;yourusername.github.io&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now go grab a drink, its well deserved! Cheers!&lt;/p&gt;
&lt;h5&gt;References&lt;/h5&gt;
&lt;p&gt;Below are a list of links or other guides that have helped me get to this point.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://hackercodex.com/guide/mac-development-configuration/&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://hackercodex.com/guide/python-development-environment-on-mac-osx/&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://superuser.com/questions/915810/pip-not-working-on-hombrew-python-2-7-install&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;http://docs.getpelican.com/en/3.6.3/install.html&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://github.com/getpelican/pelican-themes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://git-scm.com/docs/gitmodules&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://github.com/getpelican/pelican/blob/master/docs/tips.rst&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://docs.travis-ci.com/user/github-oauth-scopes&lt;/em&gt;&lt;/p&gt;</content><category term="pelican"></category><category term="mac"></category><category term="python"></category><category term="blog"></category><category term="setup"></category><category term="travis-ci"></category><category term="github pages"></category></entry></feed>