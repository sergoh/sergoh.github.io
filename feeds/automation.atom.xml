<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DevLo - automation</title><link href="http://www.devlo.io/" rel="alternate"></link><link href="http://www.devlo.io/feeds/automation.atom.xml" rel="self"></link><id>http://www.devlo.io/</id><updated>2018-11-16T00:00:00-07:00</updated><subtitle>The Lopez brothers' development blog</subtitle><entry><title>Building Robust Packer AMIs</title><link href="http://www.devlo.io/packer-ami-apt-get.html" rel="alternate"></link><published>2018-11-16T00:00:00-07:00</published><updated>2018-11-16T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-11-16:/packer-ami-apt-get.html</id><summary type="html">&lt;p&gt;How to avoid &lt;code&gt;Could not get lock /var/lib/dpkg/lock&lt;/code&gt; while using Packer&lt;/p&gt;</summary><content type="html">&lt;p&gt;Technical Stack: AWS EC2 (AWS AMI CentOS), Packer, Ubuntu 18.04
Read: 10 minutes &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Hey everyone! Sorry for the absence. I started a new job in San Francisco that attracted my attetnion the past few months.&lt;/p&gt;
&lt;p&gt;I wanted to write a quick post about an issue I encounted while creating AWS AMIs using Packer, EC2, and Ubuntu 18.04. &lt;/p&gt;
&lt;p&gt;For those of you who don't know, &lt;a href=""&gt;Packer&lt;/a&gt; is an automation tool you can use to prepack AMIs with custom libraries or dependency your code may need upon launching. You can choose to run multiple provisioners (scripts, chef, ansible, etc) against an a base AMI in order to create your image. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Race conditions w/ apt-get update&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The first issue I encountered while using Packer was while I ran &lt;code&gt;sudo apt-get update&lt;/code&gt;. No matter how many times I ran it, I would consistently get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    AWS AMI Builder - CIS: Reading package lists...
    AWS AMI Builder - CIS: W: Target Packages &lt;span class="o"&gt;(&lt;/span&gt;main/binary-amd64/Packages&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: W: Target Packages &lt;span class="o"&gt;(&lt;/span&gt;main/binary-all/Packages&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: W: Target Translations &lt;span class="o"&gt;(&lt;/span&gt;main/i18n/Translation-en&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: W: Target CNF &lt;span class="o"&gt;(&lt;/span&gt;main/cnf/Commands-amd64&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: W: Target CNF &lt;span class="o"&gt;(&lt;/span&gt;main/cnf/Commands-all&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: Installing unzip.....
    AWS AMI Builder - CIS: W: Target Packages &lt;span class="o"&gt;(&lt;/span&gt;main/binary-amd64/Packages&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: W: Target Packages &lt;span class="o"&gt;(&lt;/span&gt;main/binary-all/Packages&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: W: Target Translations &lt;span class="o"&gt;(&lt;/span&gt;main/i18n/Translation-en&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: W: Target CNF &lt;span class="o"&gt;(&lt;/span&gt;main/cnf/Commands-amd64&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: W: Target CNF &lt;span class="o"&gt;(&lt;/span&gt;main/cnf/Commands-all&lt;span class="o"&gt;)&lt;/span&gt; is configured multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; /etc/apt/sources.list.d/microsoft-prod.list:1 and /etc/apt/sources.list.d/microsoft.list:1
    AWS AMI Builder - CIS: /tmp/script_4426.sh: &lt;span class="m"&gt;6&lt;/span&gt;: /tmp/script_4426.sh: &lt;span class="o"&gt;[[&lt;/span&gt;: not found
    AWS AMI Builder - CIS: E: Could not get lock /var/lib/dpkg/lock - open &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;: Resource temporarily unavailable&lt;span class="o"&gt;)&lt;/span&gt;
    AWS AMI Builder - CIS: E: Unable to lock the administration directory &lt;span class="o"&gt;(&lt;/span&gt;/var/lib/dpkg/&lt;span class="o"&gt;)&lt;/span&gt;, is another process using it?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I did not understand why my simple script was causing &lt;code&gt;CIS: E: Could not get lock /var/lib/dpkg/lock&lt;/code&gt; to occur. &lt;/p&gt;
&lt;p&gt;Here was my provisioner: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;&amp;quot;provisioners&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;inline&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;sudo apt-get update -y&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;Installing unzip.....\&amp;quot;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;sudo apt-get --assume-yes install unzip&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;Installing python.....\&amp;quot;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;sudo apt-get --assume-yes install python&amp;quot;&lt;/span&gt;,
      &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It seemed like every other run would fail with a &lt;code&gt;CIS: E: Could not get lock /var/lib/dpkg/lock&lt;/code&gt; error and I couldn't find a good solution. Further research proved that this error occurs whenever another process had a lock on the following file. It could be &lt;em&gt;any&lt;/em&gt; process using &lt;code&gt;apt&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I searched the internet and could only fine people that would suggest &lt;code&gt;pkill&lt;/code&gt; on any process using apt found in &lt;code&gt;ps aux&lt;/code&gt;. Or they would suggest &lt;code&gt;rm /var/lib/dpkg/lock&lt;/code&gt;. Or would suggest &lt;code&gt;sleep 100&lt;/code&gt; to give whatever process was using &lt;code&gt;apt&lt;/code&gt; enough time to release it's lock. &lt;/p&gt;
&lt;p&gt;All seemed like terrible solutions to me and nothing seemed very robust. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;My Solution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I wanted to be a solution that would listen to the processes and would not continue until the process using &lt;code&gt;apt&lt;/code&gt; finishes. Whatever was using &lt;code&gt;apt&lt;/code&gt; is probably doing it in a meaninful way so it's best to let it finish before moving on. &lt;/p&gt;
&lt;p&gt;My solution was simple. By using &lt;code&gt;ps aux&lt;/code&gt; and some pipeing, we could listen to processes and only continue whenever apt was not being used by any other process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;wait_apt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ps&lt;/span&gt; &lt;span class="nv"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;grep&lt;/span&gt; &lt;span class="nv"&gt;apt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; [ &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;$wait_apt&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; ]&lt;span class="c1"&gt;; do echo &amp;quot;waiting for apt-update....&amp;quot;; wait_apt=$(ps aux | grep apt | wc -l); sleep 5; done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To break this down... &lt;code&gt;ps aux&lt;/code&gt; shows you a list of active processes, &lt;code&gt;grep apt&lt;/code&gt; filters all processes to only include &lt;code&gt;apt&lt;/code&gt; related ones and &lt;code&gt;wc -l&lt;/code&gt; gives you a line count on your results. So effectively, this little command will show you a &lt;code&gt;2&lt;/code&gt; or more whenever a process is using apt and a &lt;code&gt;1&lt;/code&gt; if apt is unused. &lt;/p&gt;
&lt;p&gt;Combine that with a while loop and you have a pretty robust way of checking for an idle apt. &lt;/p&gt;
&lt;p&gt;Here was my complete provisioner afterwards:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="s2"&gt;&amp;quot;provisioners&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;inline&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo &amp;#39;Waiting for cloud-init...&amp;#39;; sleep 1; done&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;wait_apt=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep apt &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;while [ \&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$wait_apt&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot; -gt \&amp;quot;1\&amp;quot; ]; do echo \&amp;quot;waiting for apt to be ready....\&amp;quot;; wait_apt=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep apt &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;; sleep 5; done&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;sudo apt-get update -y&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;wait_apt=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep apt &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;while [ \&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$wait_apt&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot; -gt \&amp;quot;1\&amp;quot; ]; do echo \&amp;quot;waiting for apt-update....\&amp;quot;; wait_apt=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep apt &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;; sleep 5; done&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;Installing unzip.....\&amp;quot;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;sudo apt-get --assume-yes install unzip&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;Installing python.....\&amp;quot;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;sudo apt-get --assume-yes install python&amp;quot;&lt;/span&gt;,
      &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finding this solution was important to me because I wanted to Packer to work 100% of the time. I didn't want to randomly encounter &lt;code&gt;CIS: E: Could not get lock /var/lib/dpkg/lock&lt;/code&gt; errors. &lt;/p&gt;</content><category term="automation"></category><category term="aws"></category><category term="cloud"></category><category term="EC2"></category><category term="automation"></category><category term="packer"></category><category term="apt"></category><category term="apt-get"></category><category term="ub ubutnu"></category></entry><entry><title>Jenkins Pipeline Env Variables w/ AWS SSM</title><link href="http://www.devlo.io/ssm-env-jenkins.html" rel="alternate"></link><published>2018-04-12T00:00:00-07:00</published><updated>2018-04-12T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-04-12:/ssm-env-jenkins.html</id><summary type="html">&lt;p&gt;Pull environment variables from AWS Parameter Store in a Jenkins Declarative Pipeline&lt;/p&gt;</summary><content type="html">&lt;p&gt;Technical Stack: AWS Parameter Store, Jenkins, Jenkinsfile, Shell&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;By the end of this article, you should understand how to use AWS Parameter Store (SSM) to pull down environment variables in your Jenkins Declarative Pipeline.&lt;/p&gt;
&lt;p&gt;I recommend heading over to the &lt;a href="https://jenkins.io/doc/book/pipeline/syntax/"&gt;Jenkins Pipeline documentation&lt;/a&gt; if you've never heard of a Jenkinsfile. Writing your job as a Jenkinsfile is also known as &lt;em&gt;Jenkins-as-code&lt;/em&gt; because it allows you to check your Jenkins job into source control. It allows you to version your build jobs and port them to other Jenkins boxes.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Jenkins Credentials Store&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;For the regular Jenkinsfile creators out there, you might be asking me why i'm using AWS Parameter Store to fetch credentials when Jenkins already has a &lt;a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials"&gt;credentials&lt;/a&gt; store that looks something like this....&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipeline {
    agent {
        // Define agent details here
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials(&amp;#39;jenkins-aws-secret-key-id&amp;#39;)
        AWS_SECRET_ACCESS_KEY = credentials(&amp;#39;jenkins-aws-secret-access-key&amp;#39;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The answer is simple: portability of Jenkins jobs. I wanted to remove the dependency of my Jenkinsfiles depending on the credentials store on my Jenkins box being loaded up with parameters. &lt;/p&gt;
&lt;p&gt;I've seen some teams solve this issue by checking the environment variables into source control directly. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipeline {
    agent any
    environment { 
        env = &amp;#39;stage&amp;#39;
        secret = &amp;#39;xxxxxxxxxxxxxxxx&amp;#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However this isn't any better because it encourages you to possibly explose environment secrets or configurations via source control.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;AWS SSM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;About a year ago, my team decided to standardize a majority of our application configurations and secrets on the &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html"&gt;AWS Parameter Store&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This led me to explore the idea of loading SSM variables into my environment block on the Jenkinsfile. AWS Parameter Store has worked fantastically for us. We use it with Saltstack, in our main applicaton and shell script files throughout the automation toolchain. It only made sense that I would try to extend SSM to our Jenkinsfile. &lt;/p&gt;
&lt;p&gt;In order for this to work, it's important to note that your Jenkins box will need two things. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IAM Role attached with permissions to AWS SSM and any KMS decryption keys&lt;/li&gt;
&lt;li&gt;AWS CLI installed on the box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's how SSM looks in enviornment variables: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aws&lt;/span&gt; &lt;span class="n"&gt;ssm&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="n"&gt;$REGION&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jenkins&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nonprod&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;iam&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="n"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decryption&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="n"&gt;\&amp;#39;s/&amp;quot;//g\&amp;#39;)&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aws&lt;/span&gt; &lt;span class="n"&gt;ssm&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="n"&gt;$REGION&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jenkins&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nonprod&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;iam&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="n"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decryption&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="n"&gt;\&amp;#39;s/&amp;quot;//g\&amp;#39;)&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty simple right? Here you can see that the CLI commands are being loaded into &lt;code&gt;SECRET_ACCESS_KEY&lt;/code&gt; and &lt;code&gt;ACCESS_KEY_ID&lt;/code&gt;. It's important to note that the CLI commands will not be executed until they are run in a &lt;code&gt;sh&lt;/code&gt; command in the &lt;code&gt;stages&lt;/code&gt; section of your pipeline. &lt;/p&gt;
&lt;p&gt;Including the enviornment variables throughout your pipeline is easy. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;stages {
        stage (&amp;#39;Initialize VPC&amp;#39;) {
            steps {
                dir(&amp;#39;terraform&amp;#39;){
                    sh &amp;quot;&amp;quot;&amp;quot;
                    serverless config credentials --provider provider --key &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACCESS_KEY_ID&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; --secret &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
                    &amp;quot;&amp;quot;&amp;quot;
                }
            }
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two important things to note here. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's important to use &lt;code&gt;"&lt;/code&gt;. Double quotes is our way of signifying that this is a groovy string.&lt;/li&gt;
&lt;li&gt;You must use the &lt;code&gt;${env.VARIABLE}&lt;/code&gt; syntax to get variables from the envrionment section.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the previous example, you can see that we are exporting AWS Secret Keys and AWS Access Keys so that the Serverless CLI can use the credentials. It should be noted that the CLI Commands are being evaluated on the fly. This means that a string containing the AWS SSM CLI Command is loaded from the &lt;code&gt;environment&lt;/code&gt; block, the command is ran, and the result is then loaded into the CLI command. The CLI command from the &lt;code&gt;enviornment&lt;/code&gt; block is &lt;strong&gt;NOT&lt;/strong&gt; ran until it is called within the &lt;code&gt;sh&lt;/code&gt; command. &lt;/p&gt;
&lt;p&gt;Using AWS SSM in our Jenkinsfile has been awesome because it allows our pipeline to remain flexibile. My cloud team only has to remember to update ther Jenkins IAM role key and secret in one location should they ever choose to rotate it. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;At the end of the day, using the AWS SSM Store helps my team move towards their goal of having all infrastructure-as-code. It also standarizes our parameters on the AWS Parameter store so that application secrets aren't scattered all over the place. &lt;/p&gt;</content><category term="automation"></category><category term="jenkins"></category><category term="aws"></category><category term="cloud"></category><category term="groovy"></category><category term="automation"></category><category term="ssm"></category></entry><entry><title>If, If-else Statements in Terraform</title><link href="http://www.devlo.io/if-else-terraform.html" rel="alternate"></link><published>2018-04-10T00:00:00-07:00</published><updated>2018-04-10T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-04-10:/if-else-terraform.html</id><summary type="html">&lt;p&gt;Using if-else statements in terraforms&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Terraform v0.11.5&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In HCL, a boolean is one of the many ways you can create an if-statement.&lt;/p&gt;
&lt;p&gt;Booleans can be used in a Terraform tenerary operation to create an if-else statement. Ternary operations follow the syntax: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;CONDITION ? TRUEVAL : FALSEVAL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Combine this idea with a boolean conditional and you have an if statement. A boolean ternary function would look like....&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_eip&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the variable &lt;code&gt;create_ip&lt;/code&gt; == &lt;code&gt;true&lt;/code&gt; then return 1, else return 0. We will combine this idea with the &lt;code&gt;count&lt;/code&gt; attribtue of a resource to create an if-else statement. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;If Statement&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Start by looking at the boolean value we are passing to &lt;code&gt;create_eip&lt;/code&gt; in this module. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;frontend&amp;quot;&lt;/span&gt; {
  &lt;span class="nb"&gt;source&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;/modules/frontend-app&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;box_name&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;web-01&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;ami&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;ami-25615740&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;instance_type&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;t2.micro&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;create_eip&lt;/span&gt; = &lt;span class="n"&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Based on HCL semantics, setting the &lt;code&gt;create_eip&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; would result in the ternary operation &lt;code&gt;${var.create_eip == true ? 1 : 0}&lt;/code&gt; resolving to value of 1.
This means a value of 1 would be passed on to the &lt;code&gt;count&lt;/code&gt; parameter of the &lt;code&gt;aws_eip&lt;/code&gt; resource. This would create one eip resource.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# frontend-app module&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;create_eip&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Create an EIP if set to True&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_eip&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;web-eip&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${var.create_eip == true ? 1 : 0}&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${aws_instance.example.id}&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;If-Else Statement&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Create an if-else statement in a similar manner.&lt;/p&gt;
&lt;p&gt;Take a careful look at the following &lt;code&gt;if-eip&lt;/code&gt;, &lt;code&gt;else-eip&lt;/code&gt; example. We will use two tenary operations to achieve if-else.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;frontend&amp;quot;&lt;/span&gt; {
  &lt;span class="nb"&gt;source&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;/modules/frontend-app&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;box_name&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;web-01&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;ami&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;ami-25615740&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;instance_type&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;t2.micro&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;create_first_eip&lt;/span&gt; = &lt;span class="n"&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# frontend-app module&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;create_first_eip&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Create the first eip if set to true, otherwise create the second eip if set to false&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_eip&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;if-eip&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${var.create_first_eip == true ? 1 : 0}&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${aws_instance.example.id}&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_eip&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;else-eip&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${var.create_first_eip == false ? 1 : 0}&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${aws_instance.example.id}&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the &lt;code&gt;create_first_eip&lt;/code&gt; variable was set to &lt;code&gt;true&lt;/code&gt; then the first &lt;code&gt;aws_eip&lt;/code&gt; would be created because the &lt;code&gt;create_first_eip == true&lt;/code&gt; would result in a &lt;code&gt;count&lt;/code&gt; of 1.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;create_first_eip&lt;/code&gt; variable was set to &lt;code&gt;false&lt;/code&gt;, then the second &lt;code&gt;aws_eip&lt;/code&gt; would be created because the &lt;code&gt;create_first_eip == false&lt;/code&gt; would result in a &lt;code&gt;count&lt;/code&gt; of 1. The first &lt;code&gt;aws_eip&lt;/code&gt; would not be created because it would fail the conditional statement. &lt;/p&gt;
&lt;p&gt;This creates an if-else pattern. &lt;/p&gt;</content><category term="automation"></category><category term="aws"></category><category term="cloud"></category><category term="terraform"></category><category term="hcl"></category><category term="hashicorp"></category></entry><entry><title>Install Common Developement Tools on Mac</title><link href="http://www.devlo.io/mac-developer-enviornment.html" rel="alternate"></link><published>2018-04-04T00:00:00-07:00</published><updated>2018-04-04T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-04-04:/mac-developer-enviornment.html</id><summary type="html">&lt;p&gt;Automatically install common developer tools on macOS with this script.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Technical Stack: macOS High Sierra 
Read: 5 minutes &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mac Laptop or Desktop (script was build with macOS High Sierra)&lt;/li&gt;
&lt;li&gt;Knowledge of how to run a bash script&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I've built a script that uses homebrew to install a common set of development tools on a Mac. &lt;/p&gt;
&lt;p&gt;Feel free to download the script from my &lt;a href="https://gist.github.com/lopezm1/16e641918277a4888ee7e88722b2d7dd"&gt;github gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've done my best to avoid installing any duplicates by checking if you've already installed the application in the /Applications folder of the Mac. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Once you've download the script, head to your downloads folder on terminal and run...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bash brew-install-mac-dev-environment.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;Packages Installed&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;iTerm2&lt;/li&gt;
&lt;li&gt;Google Chrome (boooo Safari)&lt;/li&gt;
&lt;li&gt;IntelliJ Idea (Enterprise)&lt;/li&gt;
&lt;li&gt;SourceTree&lt;/li&gt;
&lt;li&gt;Spotify (super important)&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;pip3&lt;/li&gt;
&lt;li&gt;node&lt;/li&gt;
&lt;li&gt;coreutils&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to verify any of these packages after installation by checking your /Applications folder or checking for the instance in terminal. &lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git --version
python --version
pip3 --version
node --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;If you don't need to extend the script, stop reading &lt;strong&gt;here&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Packages it installs&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Extending the script is easy. &lt;/p&gt;
&lt;p&gt;If you wish to add other homebrew formulas, just add them at the end of the script. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## Install other miscellaneous tools&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;coreutils&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you wish to add another application, you'll need to use &lt;code&gt;brew cask install&lt;/code&gt; and edit the script in two places.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) Add to the application name to the application array list. (We'll add Skype as an example)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;## &lt;span class="nv"&gt;Applications&lt;/span&gt; &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; `&lt;span class="nv"&gt;brew&lt;/span&gt; &lt;span class="nv"&gt;cask&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt;`
## &lt;span class="nv"&gt;additional&lt;/span&gt; &lt;span class="nv"&gt;applications&lt;/span&gt; &lt;span class="nv"&gt;can&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;added&lt;/span&gt; &lt;span class="nv"&gt;here&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;you&lt;/span&gt; &lt;span class="nv"&gt;wish&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt; &lt;span class="nv"&gt;them&lt;/span&gt;
&lt;span class="nv"&gt;declare&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;applications&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Skype&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;Spotify&lt;/span&gt; &lt;span class="nv"&gt;Sourcetree&lt;/span&gt; &lt;span class="nv"&gt;Slack&lt;/span&gt; &lt;span class="nv"&gt;Docker&lt;/span&gt; &lt;span class="nv"&gt;iTerm&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;IntelliJ Idea&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Google Chrome&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Skype is capitalized because it would be saved to your /Applciations folder as Skype.app (the script will use this to make sure the application isn't already installed).&lt;/p&gt;
&lt;p&gt;Next, search for the application &lt;code&gt;cask-name&lt;/code&gt; on the &lt;a href="https://caskroom.github.io/search"&gt;cask room search&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) Add to the switch case statement and call brew_install with the cask-name pulled from the search&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; case $1 in
      Slack) brew_install slack;;
      Docker) brew_install docker;;
      iTerm) brew_install iterm2;;
      Google\ Chrome) brew_install google-chrome;;
      IntelliJ\ Idea) brew_install intellij-idea;;
      Sourcetree) brew_install sourcetree;;
      Spotify) brew_install spotify;;
      Skype) brew_install skype;;
      *) echo &amp;quot;Add $1 to check_before_install() to install additional applications.&amp;quot; ;;
    esac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, keep the switch case key captilaized because it reflects the application name under the /Application folder. Next, we will pass the &lt;code&gt;cask-name&lt;/code&gt; to the &lt;code&gt;`brew_install&lt;/code&gt; function inside the shell script. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Hope this helps, happy coding!&lt;/p&gt;</content><category term="automation"></category><category term="automation"></category><category term="mac"></category><category term="dev"></category></entry><entry><title>Managing Automation Around Auto Scaling Groups</title><link href="http://www.devlo.io/asg-automation-toolset.html" rel="alternate"></link><published>2018-03-31T00:00:00-07:00</published><updated>2018-03-31T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-03-31:/asg-automation-toolset.html</id><summary type="html">&lt;p&gt;How to pick an automation toolset that supports auto scaling in the cloud&lt;/p&gt;</summary><content type="html">&lt;p&gt;Technical Stack: AWS EC2 (AWS AMI CentOS), SaltStack (2018.7.X), CodeDeploy&lt;br&gt;
Read: 10 minutes &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;There are 4 key components when it comes to creating stateless servers for an autoscaling groups (ASGs). &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic Configuration Management (SaltStack, Chef, Puppet, AWS OpsWorks) &lt;/li&gt;
&lt;li&gt;Automatic Code Deployment to New VMs that Spawn (CodeDeploy) &lt;/li&gt;
&lt;li&gt;Bootstrapping Minions as they Spawn&lt;/li&gt;
&lt;li&gt;CI/CD Pipelines (Jenkins, VSTS, Code Pipelines, etc) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having these 4 components will help you achieve an automated and repeatable way of creating VMs from the ground up. This will allow you to create and register new nodes with a load balancer should the demand go up. &lt;/p&gt;
&lt;p&gt;There’s no perfect formula when it comes to selecting the right set of tools for the job. The main thing that matters is that you select a set of tools that’ll help your organization successfully manage an autoscaling group. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Configuration Management&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;These tools allow you to manage differences across different applications and environments in your infrastructure. You can manage different configuration files, symlinks, create/delete different users, web hosts files, etc. It allows you to remove “hard coding” from VMs so that you can easily produce a “production API server” or a “DEV www server”.&lt;/p&gt;
&lt;p&gt;Choosing the right configuration management tool typically boils down to choosing a tool that makes sense for your organization. I’ve been a huge fan of SaltStack because it’s declarative, meaning that order in which states are executed doesn't matter. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Automatic Code Deployment&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is important because if your ASG group ever needs to scale up another node, you need to find a way to deploy code to it without having to manually trigger a build. &lt;/p&gt;
&lt;p&gt;I’ve had great success accomplishing this with CodeDeploy. CodeDeploy is an AWS service that uses .yml based instructions in order to install an application on a VM. Here’s an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
    &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/var/www/html/&lt;/span&gt;&lt;span class="n"&gt;WordPress&lt;/span&gt;
 &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;
    &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/var/www/backend/s&lt;/span&gt;&lt;span class="n"&gt;ervice&lt;/span&gt;
&lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;BeforeInstall&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;install_dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
      &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
      &lt;span class="n"&gt;runas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
  &lt;span class="n"&gt;AfterInstall&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;change_permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
      &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
      &lt;span class="n"&gt;runas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
  &lt;span class="n"&gt;ApplicationStart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;start_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;create_test_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
      &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
      &lt;span class="n"&gt;runas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
  &lt;span class="n"&gt;ApplicationStop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stop_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
      &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
      &lt;span class="n"&gt;runas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It comes complete with life cycle events, the power to run shell scripts and even allows you to install code in multiple locations. &lt;/p&gt;
&lt;p&gt;It should always be your goal to minimize downtime during deployments (Zero downtime if possible). CodeDeploy supports this with A/B deployments or One-At-A-Time deployments.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Bootstrapping Minions&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Find a way to hook and tie a VM to the rest of your infrastructure. This is where you typically notify your configuration management tool and code deployment tool that your freshly created VM is alive and well. &lt;/p&gt;
&lt;p&gt;I've shared how to do this in another post &lt;a href="http://www.devlo.io/bootstrap-salt.html#bootstrap-salt"&gt;Automate Salt-Minion Registrations on EC2&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;CI/CD&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;It’s best to find a tool that’ll push changes to your deployment group (fleet of VMs) while also registering that a new build has been released. It’s important for your automation toolset register that a new build has been released. This will guarantee that your ASG will always install the latest version of your application.\&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Personal Experience&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I’ve personally had great success with the following tech stack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS EC2&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;CodeDeploy&lt;/li&gt;
&lt;li&gt;SaltStack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EC2 instances allow you to define a cloud-init script. Cloud-init scripts are scripts that are automatically ran once when the VM is created. This allows me to register each VM that comes online with SaltStack and CodeDeploy. &lt;/p&gt;
&lt;p&gt;Jenkins Is a great CI/CD tool to kick off builds from. Its allows me to pull down my code from GitHub, trigger a build process, run automation tests, push to static code analysis and finally deploy the build to a deployment group via CodeDeploy. &lt;/p&gt;
&lt;p&gt;From this point, CodeDeploy will begin installing the build on the requested deployment group. This can either be a single VM or an ASG. CodeDeploy is such a powerful installation Daemon because automatically registers your latest build pushed to it by a CI/CD tool. This ensures that my ASG will always receive the latest build without me having to worry about it. &lt;/p&gt;
&lt;p&gt;SaltStack has been crucial when it comes to influencing how my team designs code. We’ve done our best to start removing any/all hard coded values out of our code. Imagine if a customer needed you to change an integration URL for their prod server. With Salt, we are able to just change the config file and push out the newest state. This is so much easier than changing our code base, scheduling a time for a release, and pushing out the new build. Not to mention safer too. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Over the next few weeks I’ll be hoping to add some more posts that dive a little bit deeper into this topic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.devlo.io/bootstrap-salt.html#bootstrap-salt"&gt;Automate Salt-Minion Registrations on EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Introduction to Salt-Master&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Organizing States on Salt-Master&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Introduction to CodeDeploy&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="automation"></category><category term="saltstack"></category><category term="aws"></category><category term="cloud"></category><category term="EC2"></category><category term="automation"></category><category term="codedeploy"></category></entry><entry><title>Automate Salt-Minion Registrations on EC2</title><link href="http://www.devlo.io/bootstrap-salt.html" rel="alternate"></link><published>2018-03-30T00:00:00-07:00</published><updated>2018-03-30T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-03-30:/bootstrap-salt.html</id><summary type="html">&lt;p&gt;Use scripts to automatically register new EC2 minions with Salt-Master&lt;/p&gt;</summary><content type="html">&lt;p&gt;Automate Salt-Minion Registrations on EC2&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;These scripts can be used to register your salt minion to Salt-Master upon successfully launching. &lt;/p&gt;
&lt;p&gt;Whether you're launching single instances or launching instances as a part of an autoscaling group, I'd highly recommend using cloud-init scripts. They're easy to use and help you install all of your packages.&lt;/p&gt;
&lt;p&gt;My scripts also include CodeDeploy. If you haven't heard of CodeDeploy, I'd take a moment to read up on it here. &lt;a href="https://aws.amazon.com/codedeploy/"&gt;AWS CodeDeploy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CodeDeploy can help you with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;repeatable deployments &lt;/li&gt;
&lt;li&gt;automatic code deployments to scaled instances&lt;/li&gt;
&lt;li&gt;stops and rollbacks&lt;/li&gt;
&lt;li&gt;deployment history&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cloud Init Script&lt;/h2&gt;
&lt;p&gt;Technical Stack: SaltStack, EC2(CentOS)&lt;/p&gt;
&lt;p&gt;Use this as the cloud-init data for an EC2 instance. Works fanstastically with auto-scaling-groups. Recommend placing this script in a cloudformation or terraform script so that all instances are automatically launched with it. &lt;/p&gt;
&lt;p&gt;Installs codedeploy and automatically registers salt-minion to a salt-master.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dynamic by region&lt;/li&gt;
&lt;li&gt;installs codedeploy-agent&lt;/li&gt;
&lt;li&gt;registers salt-minion to master&lt;/li&gt;
&lt;li&gt;auto-deploy your latest revision from a CodeDeploy deployment group to this instance &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#cloud-config
# Set hostname to match the instance ID, rather than the
# automatic hostname based on the IP address.
# In these three commands _GRP_ is a placeholder and
# should be changed to your Auto Scaling Group name.
bootcmd:
  # Dynamically fetch region for EC2 in aws
  - &amp;quot;region=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone | sed &amp;#39;s/.$//&amp;#39;)&amp;quot;
  - &amp;quot;sudo yum -y install ruby wget jq&amp;quot;
  # Install codedeploy https://aws.amazon.com/codedeploy/
  - &amp;quot;sudo cd /home/ec2-user&amp;quot;
  - &amp;quot;sudo wget https://aws-codedeploy-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.s3.amazonaws.com/latest/install&amp;quot;
  - &amp;quot;sudo chmod +x ./install&amp;quot;
  - &amp;quot;sudo ./install auto&amp;quot;
  - &amp;quot;sudo service codedeploy-agent start&amp;quot;
  # BOX_NAME fetches the EC2 tag for &amp;quot;Name&amp;quot; - name used to register with salt master
  - &amp;quot;INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)&amp;quot;
  - &amp;quot;BOX_NAME=$(aws ec2 describe-tags --region &lt;span class="nv"&gt;$region&lt;/span&gt; --filters \&amp;quot;Name=resource-id,Values=&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt;\&amp;quot; | jq &amp;#39;.Tags[] | select(.Key == \&amp;quot;Name\&amp;quot;) | .Value&amp;#39; | sed s/\\\&amp;quot;//g)&amp;quot;
  # Change hostnames on VM
  - &amp;quot;cloud-init-per instance my_set_hostname sh -xc \&amp;quot;echo &lt;span class="nv"&gt;$BOX_NAME&lt;/span&gt;-&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt; &amp;gt; /etc/hostname; hostname -F /etc/hostname\&amp;quot;&amp;quot;
  - &amp;quot;cloud-init-per instance my_etc_hosts sh -xc \&amp;quot;sed -i -e &amp;#39;/^127.0.0.1/d&amp;#39; /etc/hosts; sed -i -e &amp;#39;/^::1/d&amp;#39; /etc/hosts; echo 127.0.0.1 &lt;span class="nv"&gt;$BOX_NAME&lt;/span&gt;-&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts\&amp;quot;&amp;quot;
  # Install and bootstrap salt-minion to saltmaster
  - &amp;quot;SALT_MASTER_IP={IP-TO-SALT-MASTER-HERE}&amp;quot;
  - &amp;quot;mkdir -p /etc/salt/; &lt;span class="nv"&gt;$BOX_NAME&lt;/span&gt;-&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt; &amp;gt; /etc/salt/minion_id&amp;quot;
  - &amp;quot;sudo curl -o /tmp/bootstrap-salt.sh -L https://bootstrap.saltstack.com&amp;quot;
  - &amp;quot;sudo sh /tmp/bootstrap-salt.sh -i &lt;span class="nv"&gt;$BOX_NAME&lt;/span&gt;-&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt; -A &lt;span class="nv"&gt;$SALT_MASTER_IP&lt;/span&gt;&amp;quot;
  - &amp;quot;sudo rm -f /tmp/bootstrap-salt.sh&amp;quot;
# Preserve the hostname file since we&amp;#39;ve had to manually edit it
preserve_hostname: true
# Don&amp;#39;t let cloud-init update the hosts file since we have edited it manually
manage_etc_hosts: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;You'll notice some curls to http://169.254.169.254, this is an internal API used by EC2 instances to fetch metadata about your instance&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Replace $SALT_MASTER_IP with the IP of your salt-master. Don't forget to tag your EC2 instance with a "Name" tag. Naming is important when it comes to defining salt environments.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example:
- &lt;em&gt;stage-api&lt;/em&gt;
- &lt;em&gt;stage-www&lt;/em&gt;
- &lt;em&gt;test-api&lt;/em&gt;
- &lt;em&gt;test-www&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;These are all great examples of "Name" tags for instances because it allows you to apply salt states by '&lt;em&gt;www', '&lt;/em&gt;api', 'stage&lt;em&gt;' or 'test&lt;/em&gt;' or some other combination. &lt;/p&gt;
&lt;p&gt;This can be extremely useful for defining how you run salt commands. This naming convention would allow you to run salt commands in the following way: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;salt &lt;span class="s1"&gt;&amp;#39;stage*&amp;#39;&lt;/span&gt; state.show_top
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command would only apply salt states to environments tagged with &lt;em&gt;stage&lt;/em&gt; in their name. In this example, that would mean the stage-api and stage-www server. &lt;/p&gt;
&lt;h2&gt;Shell Script Equivalent&lt;/h2&gt;
&lt;p&gt;Technical Stack: SaltStack, EC2(CentOS)&lt;/p&gt;
&lt;p&gt;Installs codedeploy and automatically registers salt-minion to a salt-master. Use this script if only if you'd like your packages to be installed post-creation. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dynamic by region&lt;/li&gt;
&lt;li&gt;installs codedeploy-agent&lt;/li&gt;
&lt;li&gt;registers salt-minion to master&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run this as a bootstrapping script on an EC2 instance. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Dynamically fetch region for EC2 in aws&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl http://169.254.169.254/latest/meta-data/placement/availability-zone &lt;span class="p"&gt;|&lt;/span&gt; sed ’s/.$//‘&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# gr8 packages&lt;/span&gt;
sudo yum -y install ruby wget jq&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Install codedeploy https://aws.amazon.com/codedeploy/&lt;/span&gt;
sudo &lt;span class="nb"&gt;cd&lt;/span&gt; /home/ec2-user&lt;span class="p"&gt;;&lt;/span&gt;
sudo wget https://aws-codedeploy-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.s3.amazonaws.com/latest/install&lt;span class="p"&gt;;&lt;/span&gt;
sudo chmod +x ./install&lt;span class="p"&gt;;&lt;/span&gt;
sudo ./install auto&lt;span class="p"&gt;;&lt;/span&gt;
sudo service codedeploy-agent start&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Name used to register with salt master&lt;/span&gt;
&lt;span class="nv"&gt;BOX_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 describe-tags --region &lt;span class="nv"&gt;$region&lt;/span&gt; --filters &lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;resource-id,Values&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.Tags[] | select(.Key == \&amp;quot;Name\&amp;quot;) | .Value&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed s/&lt;span class="se"&gt;\\\&amp;quot;&lt;/span&gt;//g&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;INSTANCE_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl http://169.254.169.254/latest/meta-data/instance-id&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Change hostnames on VM&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$BOX_NAME&lt;/span&gt;-&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt; &amp;gt; /etc/hostname&lt;span class="p"&gt;;&lt;/span&gt;
sed -i -e &lt;span class="s1"&gt;&amp;#39;/^127.0.0.1/d&amp;#39;&lt;/span&gt; /etc/hosts&lt;span class="p"&gt;;&lt;/span&gt; 
sed -i -e &lt;span class="s1"&gt;&amp;#39;/^::1/d&amp;#39;&lt;/span&gt; /etc/hosts&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="nv"&gt;$BOX_NAME&lt;/span&gt;-&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Install and bootstrap salt-minion to saltmaster&lt;/span&gt;
&lt;span class="nv"&gt;SALT_MASTER_IP&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;IP-TO-SALT-MASTER-HERE&lt;span class="o"&gt;}&lt;/span&gt;
mkdir -p /etc/salt/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$BOX_NAME&lt;/span&gt;-&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt; &amp;gt; /etc/salt/minion_id&lt;span class="p"&gt;;&lt;/span&gt;
sudo curl -o /tmp/bootstrap-salt.sh -L https://bootstrap.saltstack.com&lt;span class="p"&gt;;&lt;/span&gt;
sudo sh /tmp/bootstrap-salt.sh -i &lt;span class="nv"&gt;$BOX_NAME&lt;/span&gt;-&lt;span class="nv"&gt;$INSTANCE_ID&lt;/span&gt; -A &lt;span class="nv"&gt;$SALT_MASTER_IP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
sudo rm -f /tmp/bootstrap-salt.sh&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;You'll notice some curls to http://169.254.169.254, this is an internal API used by EC2 instances to fetch metadata about your instance&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Replace $SALT_MASTER_IP with your own variables.&lt;/p&gt;</content><category term="automation"></category><category term="saltstack"></category><category term="aws"></category><category term="cloud"></category><category term="EC2"></category><category term="automation"></category></entry><entry><title>Introduction to SaltStack</title><link href="http://www.devlo.io/my-super-post.html" rel="alternate"></link><published>2018-03-22T00:00:00-07:00</published><updated>2018-04-16T00:00:00-07:00</updated><author><name>Miguel Lopez</name></author><id>tag:www.devlo.io,2018-03-22:/my-super-post.html</id><summary type="html">&lt;p&gt;SaltStack 101, Set up your first Salt-Master and Salt-Minion&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Technical Environment: SaltStack v2018.3.0 , AWS EC2 (CentOS ami)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Difficulty: Easy&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read: 25 minutes&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Introduction to SaltStack&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;TLDR; SaltStack rocks. Let Salt manage your infrastructure and you’ll look like a hero.&lt;/p&gt;
&lt;p&gt;Configuration Management (as it pertains to software infrastructure) is this idea that you have a central node or tool that is responsible for managing the state of each individual node throughout your infrastructure. It makes your life 100% easier by automating startup scripts, ssh-key placement, symlinks, config files and much much more. &lt;/p&gt;
&lt;p&gt;Have you ever found yourself in a situation where you’re constantly having to repeat the same tasks on a single VM or fleet of VMs? If so, then configuration management is probably something you need. &lt;/p&gt;
&lt;p&gt;In this post, I’ll cover a few topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to SaltMaster&lt;/li&gt;
&lt;li&gt;How to create a salt master node&lt;/li&gt;
&lt;li&gt;How to connect a salt minion to the master node&lt;/li&gt;
&lt;li&gt;How to push states from the salt master to the minion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fair warning, all of this article covers how to use SaltStack in an AWS EC2 environment. It should be noted that SaltStack would work perfectly well on Azure, GCM, or any other datacenter model. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Key Terms&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Salt-Master:&lt;/strong&gt; node used control your salt-minions accross your infrastructure. Salt-masters will push a desired state down.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Salt-Minion:&lt;/strong&gt; node that is controlled by a Salt-Master.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Salt-State:&lt;/strong&gt; a set of instructions passed down to a node. Could be anything from placing an SSH key, downloading yum packages or removing users access.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Installing Salt-Master&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;I'll assume you know how to create an EC2 instance and SSH inside&lt;/em&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Launch EC2 Linux AMI and SSH inside&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="mf"&gt;@10.0.2.254&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;privatekey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Use Salt bootstrap script to install the Salt-Master agent&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saltstack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="n"&gt;#sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Verify Salt-Master exists&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2018.3.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Oxygen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;Installing Salt-Minions&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create salt directory and the minion_id file&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo -i;
mkdir -p /etc/salt/; 
echo &amp;quot;dev-minion-01&amp;quot; &amp;gt; /etc/salt/minion_id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Use Salt bootstrap script to install the Salt-Minion agent&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ec2-user&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;curl&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;bootstrap-salt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sh&lt;/span&gt; &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;saltstack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;bootstrap-salt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sh&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nt"&gt;dev-minion-01&lt;/span&gt; &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;254&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; flag is used to pass the name of the minion&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-A&lt;/code&gt; flag is the IP of the Salt-Master node you wish to register to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify the Salt-Minion exists&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ec2-user@ip-10-0-1-31 ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2018.3.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Oxygen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;Accept Salt-Minion&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Head back over to the Salt-Master and check if the key is listed.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Accepted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Denied&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Unaccepted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Rejected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;By this point you should see your minion key. Accept the key to put it under the Salt-Master's control.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;following&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;going&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;accepted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Unaccepted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Proceed&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n/Y&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;accepted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Accepted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Denied&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Unaccepted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Rejected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, your salt-master should be able to communicate to your salt-minion and vice-versa. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you do not see the salt-minion key appear after a minute, head back over to your salt-minion box and run &lt;code&gt;salt-minion debug&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[&lt;span class="nv"&gt;ERROR&lt;/span&gt;   ] &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;Salt&lt;/span&gt; &lt;span class="nv"&gt;Master&lt;/span&gt; &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;cached&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;node&lt;/span&gt;, &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt; &lt;span class="nv"&gt;minion&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="k"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="nv"&gt;attempting&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;authenticate&lt;/span&gt;
[&lt;span class="nv"&gt;ERROR&lt;/span&gt;   ] &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;Salt&lt;/span&gt; &lt;span class="nv"&gt;Master&lt;/span&gt; &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;cached&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;node&lt;/span&gt;, &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt; &lt;span class="nv"&gt;minion&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="k"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="nv"&gt;attempting&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;authenticate&lt;/span&gt;
[&lt;span class="nv"&gt;ERROR&lt;/span&gt;   ] &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;Salt&lt;/span&gt; &lt;span class="nv"&gt;Master&lt;/span&gt; &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;cached&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;node&lt;/span&gt;, &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt; &lt;span class="nv"&gt;minion&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="k"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="nv"&gt;attempting&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;authenticate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you see the following error, it means your salt-master and salt-minion might not be able to communicate. Ensure that port 4505-4506 are open between the two instances. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Here is how I configured my SG in Terraform&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;resource &amp;quot;aws_security_group&amp;quot; &amp;quot;sg_salt_stack&amp;quot; {
  name = &amp;quot;sg_salt_stack&amp;quot;
  vpc_id = &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;aws_vpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;

  ingress {
    from_port = &amp;quot;4505&amp;quot;
    to_port = &amp;quot;4506&amp;quot;
    protocol = &amp;quot;tcp&amp;quot;
    self = true
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = &amp;quot;-1&amp;quot;
    cidr_blocks = [&amp;quot;0.0.0.0/0&amp;quot;]
  }

  tags {
    Name = &amp;quot;sg_salt_stack&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;Configure First Salt State&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Head back over to Salt-Master. First things first, explore what's in side the /etc/salt folder. This is where the Salt-Master configuration files will live. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Archive the premade configuration file located at &lt;code&gt;/etc/salt/master&lt;/code&gt;. This file is full of instructions and definitions. It's useful to read but hard to maintain, therefore we will keep it around but create our own. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master salt&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orig&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Create your own &lt;code&gt;/etc/salt/master&lt;/code&gt; and define the bare minimum.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="n"&gt;worker_threads&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;ipv6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;log_level_logfile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;
&lt;span class="n"&gt;presence_events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Master&lt;/span&gt; &lt;span class="n"&gt;file_roots&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;file_roots&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/salt/&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;

&lt;span class="n"&gt;default_include&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/*.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;

&lt;span class="n"&gt;pillar_roots&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;

&lt;span class="n"&gt;module_dirs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/salt/&lt;/span&gt;&lt;span class="n"&gt;_modules&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/salt/&lt;/span&gt;&lt;span class="n"&gt;extmods&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the sake of this tutorial, we will only be covering a state that lives in our &lt;code&gt;/srv/salt/base&lt;/code&gt; file root. I will not be going &lt;code&gt;modules&lt;/code&gt;, &lt;code&gt;pillars&lt;/code&gt;, or &lt;code&gt;node_groups&lt;/code&gt; just quite yet and will leave those for another post. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master salt&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Quickly restart the salt-master to load the new configurations. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Our first state will live in our &lt;code&gt;base&lt;/code&gt; environment. Go ahead and create a folder in the &lt;code&gt;/srv/salt/base&lt;/code&gt; location. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master salt&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master srv&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master srv&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master salt&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master salt&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will be known as our &lt;code&gt;base&lt;/code&gt; enviornment. &lt;code&gt;Base&lt;/code&gt; environments are typically states that are applied across your each &lt;code&gt;dev&lt;/code&gt;/&lt;code&gt;test&lt;/code&gt;/&lt;code&gt;stage&lt;/code&gt;/&lt;code&gt;prod&lt;/code&gt; environment. I'll also cover how to create environment specific states in a future post. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;/srv/salt/base/touch-file&lt;/code&gt; folder. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;touch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sls&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This folder will contain our first state that will create a "Hello World" text file on our minion. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inside the &lt;code&gt;touch-file&lt;/code&gt; folder, create an &lt;code&gt;init.sls&lt;/code&gt; file. Every folder must have an &lt;code&gt;init.sls&lt;/code&gt; file. This file will contain the instructions for your state.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sls&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Paste the following text inside. It's important to note that each &lt;code&gt;.sls&lt;/code&gt; file is yml based. &lt;strong&gt;This means that spacing and tabs matter.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/tmp/hello-world.txt:
  file.managed:
    - source:
      - salt://touch-file/hello-world.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This state tells our salt-master to create a file at &lt;code&gt;/tmp/hello-world.txt&lt;/code&gt; on our salt-minion box. As a &lt;code&gt;file.managed&lt;/code&gt; state, it will create or replace the &lt;code&gt;hello-world.txt&lt;/code&gt; file whenever it does not match the &lt;code&gt;hello-world.txt&lt;/code&gt; file on the salt-master server. &lt;/p&gt;
&lt;p&gt;Be sure to read all about salt-states &lt;a href="https://docs.saltstack.com/en/latest/contents.html"&gt;on their official documentation&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create the &lt;code&gt;hello-world.txt&lt;/code&gt; file at &lt;code&gt;/srv/salt/base/touch-file&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This satisfies the &lt;code&gt;source&lt;/code&gt; requirement defined our in &lt;code&gt;init.sls&lt;/code&gt; file. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The last thing we need to do is create the &lt;code&gt;top.sls&lt;/code&gt; file. We will need to &lt;code&gt;cd&lt;/code&gt; back to our &lt;code&gt;/srv/salt/base&lt;/code&gt;. And create it there. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sls&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Paste the following text inside. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;base:
  &amp;#39;*&amp;#39;:
    - touch-file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;top.sls&lt;/code&gt; file will apply the &lt;code&gt;touch-file&lt;/code&gt; state we just created to all salt-minions under our control. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;top.sls&lt;/code&gt; files are used to define instructions for all of your environments. It defines which states are applied to a salt-minion. &lt;/p&gt;
&lt;p&gt;It's important to note that it can follow a regex pattern or a node-group. This means that it's extremely important to name your salt-minions accordingly. &lt;code&gt;'*'&lt;/code&gt; will apply states to all minions whereas &lt;code&gt;'dev*'&lt;/code&gt; would only those states to salt-minions prefixed with a &lt;code&gt;dev&lt;/code&gt; name. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We are now ready to run our first state. Run the following &lt;code&gt;state.show_top&lt;/code&gt; command to see which states will be applied.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_top&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;touch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;I always run &lt;code&gt;state.show_top&lt;/code&gt; before running a &lt;code&gt;state.apply&lt;/code&gt; to double check my salt-master is doing what I want. I can't stress this enough. It has saved me so many times.&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If everything looks good, run the &lt;code&gt;state.apply&lt;/code&gt; command to push the state down to the salt-minion.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@salt-master base&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nl"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Function&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;managed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Result&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;Started&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;46.887924&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;70.182&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;Changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nl"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nl"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="mi"&gt;0644&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Succeeded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Failed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;70.182&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If everything went well, you should see &lt;code&gt;Succeeded: 1 (changed=1)&lt;/code&gt;. This means that your state was successfully applied. You should now head back over to your salt-minion and verify that the state was successfully pushed. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verify &lt;code&gt;/tmp/hello-world.txt&lt;/code&gt; exists on the salt-minion exists. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root@ip-10-0-1-97 ec2-user&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you have it, your first salt state!&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In case you are familiar with Terraform, I've started to make some effort toward terraforming this whole process. Feel free to follow that progress on my &lt;a href="https://github.com/lopezm1/terraform-101/blob/master/mgmt/main.tf"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also find some salt-scripts that'll bootstrap autoscaling VMs as salt-minions &lt;a href="https://github.com/lopezm1/salt-scripts"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I've just scraped the surfrace with what you can do with Salt-Master. Over the next few weeks I'll be sure to add some more articles that will describe how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;configure different enviroments&lt;/li&gt;
&lt;li&gt;use pillars&lt;/li&gt;
&lt;li&gt;automatically push states to auto-scaling groups&lt;/li&gt;
&lt;li&gt;using salt formulas to create modular states&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By this point, I hope you can understand how awesome Salt really is. SaltStack has been fantastic for our company and I hope it can do the same for you.&lt;/p&gt;
&lt;p&gt;In case you are evaluating other tools, I recommend you check out &lt;a href="https://www.chef.io/chef/"&gt;Chef&lt;/a&gt;, &lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt; and &lt;a href="https://puppet.com/"&gt;Puppet&lt;/a&gt; as they all have very similar functionality. &lt;/p&gt;
&lt;p&gt;It takes time and patience to fully adopt a configuration manager but the payoff is totally worth it. &lt;/p&gt;</content><category term="automation"></category><category term="saltstack"></category><category term="aws"></category><category term="cloud"></category></entry></feed>